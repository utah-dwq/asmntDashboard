shiny::runApp()
runApp()
library(wqTools)
library(magrittr)
require(leaflet)
require(leaflet.extras)
require(RColorBrewer)
require(sf)
require(plyr)
require(DT)
# Testing/toy data
compiled.dat <- read.csv("compiled_assessment_file_final2016ir.csv")
compiled.dat <- compiled.dat[!compiled.dat$MLID_DWQCat=="do not report",]
master.site.file <- read.csv("wqp_master_site_file.csv")
# Make names same as master site file so can be merged.
names(compiled.dat)[names(compiled.dat)=="MLID_NAME"] <- "MonitoringLocationName"
names(compiled.dat)[names(compiled.dat)=="AUID"] <- "ASSESS_ID"
compiled.dat$ASSESS_ID = as.factor(paste(compiled.dat$ASSESS_ID, "00", sep="_"))
# Isolate accepted sites from master site file for example
compiled.dat <- merge(compiled.dat,unique(master.site.file[,c("IR_FLAG","MonitoringLocationName")]), all.x = TRUE)
compiled.dat <- compiled.dat[!is.na(compiled.dat$IR_FLAG)&compiled.dat$IR_FLAG=="ACCEPT",]
# Keep only sites that have a match within the master site file (MLID conventions totally different, so went with Monitoring Location Name)
# EH note: I think there are some mis-matched AU/site combos between the master site file and the compiled file. I got rid of those for now (you'll see the number of rows decrease after this next line). Merging on all leads to odd NA lat/long for sites (combos that don't exist in master site file).
compiled.sites <- merge(compiled.dat,master.site.file, by=c("ASSESS_ID","MonitoringLocationName"))
# Sample Not Supporting AUs for "New Impairment" demo
ns_aus <- compiled.sites[compiled.sites$AU_DWQCat=="Not Supporting"&compiled.sites$MLID_DWQCat=="Not Supporting",] # Need to also have a not supporting site to be deemed a "new" impairment
uniq_ns_aus <- unique(ns_aus$ASSESS_ID)
new_au_imp = sample(uniq_ns_aus, 10) # randomly pick 10 AU's to be "newly impaired" for demo
compiled.sites$new_au_imp = ifelse(compiled.sites$ASSESS_ID%in%new_au_imp,"YES","NO")
# Sample Not Supporting sites within "newly impaired" AU's to be "newly impaired" sites.
compiled_newimp = compiled.sites[compiled.sites$new_au_imp=="YES"&compiled.sites$MLID_DWQCat=="Not Supporting",]
samplesite <- function(x){as.character(sample(x$MonitoringLocationIdentifier,1))}
new_site_imp = ddply(compiled_newimp,c("ASSESS_ID"),.fun=samplesite)
compiled.sites$new_site_imp = ifelse(compiled.sites$MonitoringLocationIdentifier%in%new_site_imp$V1, "YES","NO")
# Change identifying info for site map labels/colors
compiled.sites$site_colors = ifelse(compiled.sites$new_site_imp=="YES", "New Impairment", as.character(compiled.sites$MLID_DWQCat))
compiled.sites$site_colors[compiled.sites$site_colors=="Further Investigations Needed: Further Investigations Needed"] = "More Investigation Needed"
compiled.sites$site_colors[compiled.sites$site_colors=="Insufficient Data, No Exceedances: Not Assessed"] = "Insufficient Data, No Exceedances"
compiled.sites$site_colors <- factor(compiled.sites$site_colors, levels=c(
"New Impairment",
"Not Supporting",
"Insufficient Data, Exceedances",
"More Investigation Needed",
"Insufficient Data, No Exceedances",
"No Evidence of Impairment",
"Supporting"))
# Get AU data for polygon drawing
narrow.au = unique(compiled.sites[,c("ASSESS_ID","AU_DWQCat","new_au_imp")])
au_poly1 <- merge(wqTools::au_poly, narrow.au, by="ASSESS_ID")
au_poly1$au_colors = ifelse(au_poly1$new_au_imp=="YES", "New Impairment", as.character(au_poly1$AU_DWQCat))
au_poly1$au_colors[au_poly1$au_colors=="Further Investigations Needed: Further Investigations Needed"] = "More Investigation Needed"
au_poly1$au_colors[au_poly1$au_colors=="Insufficient Data, No Exceedances: Not Assessed"] = "Insufficient Data, No Exceedances"
au_poly1$au_colors <- factor(au_poly1$au_colors, levels=c(
"New Impairment",
"Not Supporting",
"Insufficient Data, Exceedances",
"More Investigation Needed",
"Insufficient Data, No Exceedances",
"No Evidence of Impairment",
"Supporting"))
# Prep site data for plotting
site_coords=unique(compiled.sites[,c("MonitoringLocationIdentifier","MonitoringLocationName","MonitoringLocationTypeName","LatitudeMeasure","LongitudeMeasure","site_colors","MLID_DWQCat","IR_MLID")])
names(site_coords)[names(site_coords)=="MonitoringLocationIdentifier"]="locationID"
names(site_coords)[names(site_coords)=="MonitoringLocationName"]="locationName"
names(site_coords)[names(site_coords)=="MonitoringLocationTypeName"]="locationType"
site_coords1=sf::st_as_sf(site_coords, coords=c("LongitudeMeasure","LatitudeMeasure"), crs=4326, remove=F)
# Create reviewer list
wmu_assign <- as.data.frame(unique(compiled.sites$WMU))
names(wmu_assign)[names(wmu_assign)=="unique(compiled.sites$WMU)"] <- "WMU"
wmu_assign$num <- sample(1:3,10, replace=TRUE)
wmu_assign$reviewer <- "Jake"
wmu_assign$reviewer[wmu_assign$num==2] <- "Elise"
wmu_assign$reviewer[wmu_assign$num==3] <- "Emilie"
review_assign <- merge(compiled.sites[,c("WMU","ASSESS_ID","IR_MLID")], wmu_assign)
# Original data to be in data tables
au_data_table <- unique(compiled.dat[compiled.dat$MonitoringLocationName%in%compiled.sites$MonitoringLocationName,c("IR_Year","WMU","Agency","ASSESS_ID","AUID_Descr","AUID_Loc","AU_USES",
"AU_EPACat","AU_DWQCat")])
rem_cols <- names(au_data_table)[!names(au_data_table)%in%"ASSESS_ID"]
site_data_table <- compiled.dat[compiled.dat$MonitoringLocationName%in%compiled.sites$MonitoringLocationName,!names(compiled.dat)%in%rem_cols]
au_data_table
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("shinyBS")
runApp()
runApp()
runApp()
runApp()
